# -*- coding: utf-8 -*-
"""svm_breast_cancer.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G64F8d2ltEW4XTck9TTNjnQp3I8ni-nd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from matplotlib.colors import ListedColormap

# Load dataset
dataset = load_breast_cancer()
X = pd.DataFrame(dataset.data, columns=dataset.feature_names)
y = pd.DataFrame(dataset.target, columns=["target"])

# Data Preprocessing: Train-test split and scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# SVM Classifier with linear kernel
svm_clf = SVC(kernel='linear', random_state=42)
svm_clf.fit(X_train, y_train.values.ravel())
y_pred_svm = svm_clf.predict(X_test)

# Logistic Regression
logreg_clf = LogisticRegression(random_state=42)
logreg_clf.fit(X_train, y_train.values.ravel())
y_pred_logreg = logreg_clf.predict(X_test)

# Random Forest Classifier
rf_clf = RandomForestClassifier(random_state=42)
rf_clf.fit(X_train, y_train.values.ravel())
y_pred_rf = rf_clf.predict(X_test)

# Confusion Matrix and Accuracy
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, y_pred_svm))
print("SVM Accuracy: ", accuracy_score(y_test, y_pred_svm))

print("Logistic Regression Confusion Matrix:\n", confusion_matrix(y_test, y_pred_logreg))
print("Logistic Regression Accuracy: ", accuracy_score(y_test, y_pred_logreg))

print("Random Forest Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print("Random Forest Accuracy: ", accuracy_score(y_test, y_pred_rf))

# Visualization of SVM Decision Boundary (with 2 features for simplicity)
def plot_decision_boundary(X, y, classifier, title, feature1_idx, feature2_idx):
    X_set, y_set = X, y
    X1, X2 = np.meshgrid(np.arange(start=X_set[:, feature1_idx].min() - 1, stop=X_set[:, feature1_idx].max() + 1, step=0.01),
                         np.arange(start=X_set[:, feature2_idx].min() - 1, stop=X_set[:, feature2_idx].max() + 1, step=0.01))

    plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
                 alpha=0.75, cmap=ListedColormap(('red', 'green')))
    plt.xlim(X1.min(), X1.max())
    plt.ylim(X2.min(), X2.max())

    for i, j in enumerate(np.unique(y_set)):
        plt.scatter(X_set[y_set == j, feature1_idx], X_set[y_set == j, feature2_idx],
                    c=ListedColormap(('red', 'green'))(i), label=j)

    plt.title(title)
    plt.xlabel(dataset.feature_names[feature1_idx])
    plt.ylabel(dataset.feature_names[feature2_idx])
    plt.legend()
    plt.show()

# Selecting two features for plotting
X_train_2D = X_train[:, [0, 1]]  # Select first two features for simplicity
y_train_2D = y_train.values.ravel()

# Retrain SVM on 2 features for visualization
svm_clf_2D = SVC(kernel='linear', random_state=42)
svm_clf_2D.fit(X_train_2D, y_train_2D)

# Plot decision boundary
plot_decision_boundary(X_train_2D, y_train_2D, svm_clf_2D, "SVM Decision Boundary (2 features)", 0, 1)